import numpy as np

def driver():


    f = lambda x: x*np.log(x)
    a = 0
    b = 1
    n = 1000
    m_values = [3,5,9,17,33]
    area = np.zeros(len(m_values))

    for i in range(len(m_values)):
        area[i] = Trap_RH_Corrected(f,a,b,n,m_values[i])

    print(area)

def Bernouli_Weights(m):
    if m == 3:
        B = [0.4166666666666*(10**-1)]

    elif m == 5:
        B = [0.56944444444444*(10**-1),
            -.76388888888888*(10**-2)]
        
    elif m == 9:
        B = [0.6965636022927689*(10**-1),
            -.1877177028218695*(10**-1),
            0.3643353174603175*(10**-2),
             -.3440531305114639*(10**-3)]
        
    elif m == 17:
        B = [0.78362263347845*(10**-1),
            -.2965891540255508*(10**-1),
            0.1100166460634853*(10**-1),
            -.3464763345380610*(10**-2),
            0.8560837610996298*(10**-3),
            -.1531936403942661*(10**-3),
            0.1753039202853559*(10**-4),
            -.9595026156320693*(10**-6)]
        
    elif m == 33:
        B = [0.8356586223906431*(10**-1),
            -.3772568901686391*(10**-1),
            0.1891730418359046*(10**-1),
            -.9296840793733075*(10**-2),
            0.4266725355474016*(10**-2),
            -.1781711570625946*(10**-2),
            0.6648868875120770*(10**-3),
            -.2183589125884841*(10**-3),
            0.6214890604453148*(10**-4),
            -.1506576957395117*(10**-4),
            0.3044582263327824*(10**-5),
            -.4984930776384444*(10**-6),
            0.6348092751221161*(10**-7),
            -.5895566482845523*(10**-8),
            0.3550460453274996*(10**-9),
            -.1040273372883201*(10**-10)]
    else:
        print('Insufficient m-value')
        B = 0

    return(B)

def Trap_RH_Corrected(f,a,b,n,m):
    h = (b-a)/(n-1)
    sum1 = 0.5*f(b)
    for i in range(1,n-1):
        sum1 = sum1 + f(a + i*h)
    sum2 = 0
    B = Bernouli_Weights(m)
    for l in range(1,(m-1)/2):
        sum2 = sum2 + (f(b-l*h) - f(b+l*h))*B[l-1]
    sum_total = sum1 + sum2
    area = sum_total*h
    return(area)
        
driver()